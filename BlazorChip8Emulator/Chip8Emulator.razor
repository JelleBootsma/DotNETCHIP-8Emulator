@using Blazor.Extensions;
@using Chip8EmulationCore.IOInterfaces
@using Chip8EmulationCore
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@implements IAsyncDisposable
@inject IJSRuntime JsRuntime

<InputFile OnChange="LoadFile" />
<div @ref="_focusDiv" @onkeydown="_keyPad.RegisterKeyDown" @onkeyup="_keyPad.RegisterKeyUp">
    <BECanvas Width="640" Height="320" @ref="_canvasRef" />

</div>

@code{
    private BECanvasComponent _canvasRef = null!;
    private CanvasDisplay _display = null!;
    private ElementReference _focusDiv;
    private JsInterop _interop = null!;
    private BlazorKeyPad _keyPad = new();
    private ISoundHandler _soundHandler = new NoSoundHandler();
    private Cpu _core = null!;
    private Task? _runningEmulatorTask;
    private CancellationTokenSource? _runningEmulatorCancellationSource;

    protected override void OnInitialized()
    {
        _interop = new(JsRuntime);
        base.OnInitialized();

    }

    private async Task LoadFile(InputFileChangeEventArgs fileSelectEvent)
    {
        const long MAX_ALLOWED_SIZE = 512_000;

        // Cancel the runnning emulator (if there is an emulator running)
        if (_runningEmulatorCancellationSource is not null)
            _runningEmulatorCancellationSource.Cancel();

        _core = new Cpu(_display, _soundHandler, _keyPad);
        _display.Clear();

        byte[] rom;
        if (fileSelectEvent.File.Size > MAX_ALLOWED_SIZE || fileSelectEvent.File.Size < 0)
            throw new ArgumentOutOfRangeException(nameof(fileSelectEvent), $"Input file too large or too small; Size: {fileSelectEvent.File.Size}");

        using (var ms = new MemoryStream((int)fileSelectEvent.File.Size))
        using (var stream = fileSelectEvent.File.OpenReadStream())
        {
            await stream.CopyToAsync(ms);
            rom = ms.ToArray();
        }

        _core.LoadRom(rom);
        _runningEmulatorCancellationSource = new();

        // Run the emulator on a background thread
        _runningEmulatorTask = Task.Run(() => _core.StartEmulator(_runningEmulatorCancellationSource.Token));
        await _interop.ClaimFocus(_focusDiv);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender)
            return;
        var context = await _canvasRef.CreateCanvas2DAsync();
        _display = new CanvasDisplay(_canvasRef, context);
        await _interop.ClaimFocus(_focusDiv);
        _core = new Cpu(_display, _soundHandler, _keyPad);
    }

    public async ValueTask DisposeAsync()
    {
        if (_interop is not null)
            await _interop.DisposeAsync();
    }
}